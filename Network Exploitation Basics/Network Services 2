  -->  Understanding NFS
NFS stands for "Network File System" and allows a system to share directories and files with others over a network. By using NFS, users and programs can access files on remote systems almost as if they were local files.
It does this by mounting all, or a portion of a file system on a server. The portion of the file system that is mounted can be accessed by clients with whatever privileges are assigned to each file.
We don't need to understand the technical exchange in too much detail to be able to exploit NFS effectively
refer this for more details --> https://docs.oracle.com/cd/E19683-01/816-4882/6mb2ipq7l/index.html

First, the client will request to mount a directory from a remote host on a local directory just the same way it can mount a physical device. The mount service will then act to connect to the relevant mount daemon using RPC.
The server checks if the user has permission to mount whatever directory has been requested. It will then return a file handle which uniquely identifies each file and directory that is on the server.
If someone wants to access a file using NFS, an RPC call is placed to NFSD (the NFS daemon) on the server. This call takes parameters such as:
The file handle
The name of the file to be accessed
The user's, user ID
The user's group ID

Using the NFS protocol, you can transfer files between computers running Windows and other non-Windows operating systems, such as Linux, MacOS or UNIX.
A computer running Windows Server can act as an NFS file server for other non-Windows client computers. Likewise, NFS allows a Windows-based computer running Windows Server to access files stored on a non-Windows NFS server.
other resources
https://www.datto.com/blog/what-is-nfs-file-share/
http://nfs.sourceforge.net/
https://wiki.archlinux.org/index.php/NFS

question -->
1.)  What is the latest version of NFS? [released in 2016, but is still up to date as of 2020] This will require external research.
     ans --> 4.2
2.)  Can a Windows NFS server share files with a Linux client? (Y/N)
     ans --> Y
3.)  Can a Linux NFS server share files with a MacOS client? (Y/N)
     ans --> Y
4.) What does NFS use to represent files and directories on the server?
     ans --> file handle

  -->  Enumerating NFS
-->  Requirements
In order to do a more advanced enumeration of the NFS server, and shares- we're going to need a few tools. The first of which is key to interacting with any NFS share from your local machine: """"  nfs-common  """".

-->  NFS-Common
It is important to have this package installed on any machine that uses NFS, either as client or server. It includes programs such as: lockd, statd, showmount, nfsstat, gssd, idmapd and mount.nfs. Primarily, we are concerned with "showmount" and "mount.nfs" as these are going to be most useful to us when it comes to extracting information from the NFS share.
for more read this --> https://packages.ubuntu.com/jammy/nfs-common.

-->  Mounting NFS shares
Your client’s system needs a directory where all the content shared by the host server in the export folder can be accessed. You can create
this folder anywhere on your system. Once you've created this mount point, you can use the "mount" command to connect the NFS share to the mount point on your machine like so:
""""  sudo mount -t nfs IP:share /tmp/mount/ -nolock  """""

Tag	                                                Function
sudo	                                            Run as root
mount	                                      Execute the mount command
-t nfs	                             Type of device to mount, then specifying that it's NFS
IP:share	                           The IP Address of the NFS server, and the name of the share we wish to mount
-nolock	                                    Specifies not to use NLM locking

The Network Lock Manager (NLM) is like a traffic cop for files on a network. Its main job is to control who can access and change files to prevent conflicts. It helps keep track of who is allowed to work on the file and prevents you both from making changes at the same time, which could cause problems.
NLM does this in a couple of ways:
-->  Advisory Locking: It lets applications know if a file is being used by someone else and advises them to wait or take special care before accessing it.
-->  Compatibility with Older Systems: It also works with older systems and protocols (like DOS) to ensure that file sharing and locking still work smoothly across different types of systems.

So, in essence, NLM helps manage who can use and modify files in a network, making sure everything runs smoothly and without conflicts.

  -->  Exploiting NFS
you found that a machine has an NFS share you might be able to use that to escalate privileges, depending on how it is configured.

What is root_squash?
By default, on NFS shares- Root Squashing is enabled, and prevents anyone connecting to the NFS share from having root access to the NFS volume.
Remote root users are assigned a user “nfsnobody” when connected, which has the least local privileges.
However, if this is turned off, it can allow the creation of SUID bit files, allowing a remote user root access to the connected system.

--> SUID
So, what are files with the SUID bit set? Essentially, this means that the file or files can be run with the permissions of the file(s) owner/group. In this case, as the super-user. We can leverage this to get a shell with these privileges!

--> Method
We're able to upload files to the NFS share, and control the permissions of these files. We can set the permissions of whatever we upload, in this case a bash shell executable. We can then log in through SSH, as we did in the previous task- and execute this executable to gain a root shell!

--> The Executable
we are giving the bash executable a suid permission and also executable permission such that when we ssh the user and run it with -p command it will elevate our privilages 
sudo chown root bash --> done inside the ntfs share
sudo chmod +sx bash  --> done inside the ntfs shaew
then ssh into the host with username and run it as ./bash -p 
we are root

  -->  Understanding SMTP
SMTP stands for "Simple Mail Transfer Protocol". It is utilised to handle the sending of emails. In order to support email services, a protocol pair is required, comprising of SMTP and POP/IMAP. Together they allow the user to send outgoing mail and retrieve incoming mail, respectively.

The SMTP server performs three basic functions:
--> It verifies who is sending emails through the SMTP server.
--> It sends the outgoing mail
--> If the outgoing mail can't be delivered it sends the message back to the sender

Most people will have encountered SMTP when configuring a new email address on some third-party email clients, such as Thunderbird,outlook,or any another mail platform; as when you configure a new email client, you will need to configure the SMTP server configuration in order to send outgoing emails.

--> POP and IMAP
POP, or "Post Office Protocol" and IMAP, "Internet Message Access Protocol" are both email protocols who are responsible for the transfer of email between a client and a mail server. The main differences is in POP's more simplistic approach of downloading the inbox from the mail server, to the client. Where IMAP will synchronise the current inbox, with new mail on the server, downloading anything new. This means that changes to the inbox made on one computer, over IMAP, will persist if you then synchronise the inbox from another computer. 

--> How does SMTP work?
Email delivery functions much the same as the physical mail delivery system. The user will supply the email (a letter) and a service (the postal delivery service), and through a series of steps- will deliver it to the recipients inbox (postbox). The role of the SMTP server in this service, is to act as the sorting office, the email (letter) is picked up and sent to this server, which then directs it to the recipient.

user --> SMTP server --> internet --> POP/IMAP server --> recipient

1. The mail user agent, which is either your email client or an external program. connects to the SMTP server of your domain, e.g. smtp.google.com. This initiates the SMTP handshake. This connection works over the SMTP port- which is usually 25. Once these connections have been made and validated, the SMTP session starts.

2. The process of sending mail can now begin. The client first submits the sender, and recipient's email address- the body of the email and any attachments, to the server.

3. The SMTP server then checks whether the domain name of the recipient and the sender is the same.

4. The SMTP server of the sender will make a connection to the recipient's SMTP server before relaying the email. If the recipient's server can't be accessed, or is not available- the Email gets put into an SMTP queue.

5. Then, the recipient's SMTP server will verify the incoming email. It does this by checking if the domain and user name have been recognised. The server will then forward the email to the POP or IMAP server, as shown in the diagram above.

6. The E-Mail will then show up in the recipient's inbox.

there are a lot of sub-protocols, communications and details that haven't been included. If you're looking to learn more about this topic, this is a really friendly to read breakdown of the finer technical details- I actually used it to write this breakdown:

https://computer.howstuffworks.com/e-mail-messaging/email3.htm

--> What runs SMTP?
SMTP Server software is readily available on Windows server platforms, with many other variants of SMTP being available to run on Linux.

Here is a resource that explain the technical implementation, and working of, SMTP in more detail than I have covered here.
https://www.afternerd.com/blog/smtp/

Composition and Submission: Sender writes and sends the email from their client to their SMTP server.
--> SMTP Handling: Sender’s SMTP server routes the email based on the recipient's domain.
--> DNS Lookup: SMTP server finds the recipient’s mail server using MX records.
--> Email Transfer: Email is sent from sender’s SMTP server to recipient’s SMTP server.
--> Storage: Recipient’s mail server(IMAP/POP) stores the email.
--> Retrieval: Recipient’s email client retrieves the email from the mail server (IMAP or POP).
--> Access: Recipient reads and interacts with the email.

  --> Enumerating SMTP
--> Enumerating Server Details
 We're going to use the "smtp_version" module in MetaSploit to do this.

--> Enumerating Users from SMTP
The SMTP service has two internal commands that allow the enumeration of users: VRFY (confirming the names of valid users) and EXPN (which reveals the actual address of user’s aliases and lists of e-mail (mailing lists). Using these SMTP commands, we can reveal a list of valid users

We can do this manually, over a telnet connection- however Metasploit comes to the rescue again, providing a handy module appropriately called "smtp_enum" that will do the legwork for us! Using the module is a simple matter of feeding it a host or range of hosts to scan and a wordlist containing usernames to enumerate.

--> Alternatives
It's worth noting that this enumeration technique will work for the majority of SMTP configurations; however there are other, non-metasploit tools such as smtp-user-enum that work even better for enumerating OS-level user accounts on Solaris via the SMTP service. Enumeration is performed by inspecting the responses to VRFY, EXPN, and RCPT TO commands.

TASK -->

this room required metasploit so (to open it use msfconsole)
We're going to be using the "top-usernames-shortlist.txt" wordlist from the Usernames subsection of seclists (/usr/share/wordlists/SecLists/Usernames if you have it installed).
https://github.com/danielmiessler/SecLists

search smtp_version , search smtp_enum 

using them then see options and set accordingly 

[+] 10.10.69.26:25        - 10.10.69.26:25 SMTP 220 polosmtp.home ESMTP Postfix (Ubuntu)\x0d\x0a
from this we get 
What's the system mail name? --> polosmtp.home
What Mail Transfer Agent (MTA) is running the SMTP server? --> Postfix


We know from our port scan, that the only other open port on this machine is an SSH login. We're going to use this information to try and bruteforce the password of the SSH login for our user using Hydra.
--> Hydra
There is a wide array of customisability when it comes to using Hydra, and it allows for adaptive password attacks against of many different services, including SSH.

Hydra uses dictionary attacks primarily, both Kali Linux and Parrot OS have many different wordlists in the "/usr/share/wordlists" directory- if you'd like to browse and find a different wordlists to the widely used "rockyou.txt". Likewise I recommend checking out SecLists for a wider array of other wordlists that are extremely useful for all sorts of purposes, other than just password cracking. E.g. subdomain enumeration

command --> hydra -t 16 -l USERNAME -P /usr/share/wordlists/rockyou.txt -vV ip ssh
username - administrator and ip - set accordingly

SECTION	                                                                  FUNCTION
hydra	                                                              Runs the hydra tool
-t 16                                                    Number of parallel connections per target
-l [user]	                                               Points to the user who's account you're trying to compromise
-P [path to dictionary]	                                 Points to the file containing the list of possible passwords
-vV                                                      Sets verbose mode to very verbose, shows the login+pass combination for each attempt
[machine IP]	                                           The IP address of the target machine
ssh / protocol	                                         Sets the protocol (this means instead of ssh you can add another protocol)

  -->  Understanding MySQL
--> What is MySQL?
In its simplest definition, MySQL is a relational database management system (RDBMS) based on Structured Query Language (SQL).

--> Database:
A database is simply a persistent, organised collection of structured data.

--> RDBMS:
A software or service used to create and manage databases based on a relational model. The word "relational" just means that the data stored in the dataset is organised as tables. Every table relates in some way to each other's "primary key" or other "key" factors.

--> SQL:
MYSQL is just a brand name for one of the most popular RDBMS software implementations. As we know, it uses a client-server model. But how do the client and server communicate? They use a language, specifically the Structured Query Language (SQL).

Many other products, such as PostgreSQL and Microsoft SQL server, have the word SQL in them. This similarly signifies that this is a product utilising the Structured Query Language syntax.

--> How does MySQL work?
MySQL, as an RDBMS, is made up of the server and utility programs that help in the administration of MySQL databases.

The server handles all database instructions like creating, editing, and accessing data. It takes and manages these requests and communicates using the MySQL protocol. This whole process can be broken down into these stages:
1.) MySQL creates a database for storing and manipulating data, defining the relationship of each table.
2.) Clients make requests by making specific statements in SQL.
3.) The server will respond to the client with whatever information has been requested.

--> What runs MySQL?
MySQL can run on various platforms, whether it's Linux or windows. It is commonly used as a back end database for many prominent websites and forms an essential component of the LAMP stack, which includes: Linux, Apache, MySQL, and PHP. 

--> More Information:
Here are some resources that explain the technical implementation, and working of, MySQL in more detail than I have covered here:
https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_SQL_EXECUTION.html 
https://www.w3schools.com/php/php_mysql_intro.asp

What communication model does MySQL use? --> client-server
What is a common application of MySQL? --> back end database

  -->  Enumerating MySQL
--> When you would begin attacking MySQL
MySQL is likely not going to be the first point of call when getting initial information about the server. You can, as we have in previous tasks, attempt to brute-force default account passwords if you really don't have any other information.

--> The Scenario
Typically, you will have gained some initial credentials from enumerating other services that you can then use to enumerate and exploit the MySQL service. As this room focuses on exploiting and enumerating the network service, for the sake of the scenario, we're going to assume that you found the credentials: "root:password" while enumerating subdomains of a web server. After trying the login against SSH unsuccessfully, you decide to try it against MySQL.

--> Alternatives
As with the previous task, it's worth noting that everything we will be doing using Metasploit can also be done either manually or with a set of non-Metasploit tools such as nmap's mysql-enum script: https://nmap.org/nsedoc/scripts/mysql-enum.html or https://www.exploit-db.com/exploits/23081. to understand this try manually for better clarification

task --> here first try to coonect directly with mysql-client , then find metasploit mysql module then find set options set the the options
here 1. option is to set the sql querry which is usefull for us 


  -->  Exploiting MySQL
--> What do we know?
1. MySQL server credentials
2. The version of MySQL running
3. The number of Databases, and their names.

--> Key Terminology
1.) Schema:
In MySQL, physically, a schema is synonymous with a database. You can substitute the keyword "SCHEMA" instead of DATABASE in MySQL SQL syntax, for example using CREATE SCHEMA instead of CREATE DATABASE. It's important to understand this relationship because some other database products draw a distinction. For example, in the Oracle Database product, a schema represents only a part of a database: the tables and other objects owned by a single user.

2.) Hashes:
Hashes are, very simply, the product of a cryptographic algorithm to turn a variable length input into a fixed length output.
In MySQL hashes can be used in different ways, for instance to index data into a hash table. Each hash has a unique ID that serves as a pointer to the original data. This creates an index that is significantly smaller than the original data, allowing the values to be searched and accessed more efficiently
However, the data we're going to be extracting are password hashes which are simply a way of storing passwords not in plaintext format.

here we two different metasploit modules --> mysql_schemadump(for list out all the tables) , mysql_hashdump(to list out all the hashes of the users)
mysql_hashdump --> we found carl and hash --> copied to hash.txt --> john hash.txt --> doggie (password) --> ssh we got the flag

Reading
Here's some things that might be useful to read after completing this room, if it interests you:
 --->  https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/4/html/security_guide/ch-exploits
 --->  https://www.nextgov.com/cybersecurity/2019/10/nsa-warns-vulnerabilities-multiple-vpn-services/160456/

