  -->  Inject the juice
This task will be focusing on injection vulnerabilities.
There are many types of injection attacks, some of them are:

1.)  SQL Injection  -->  SQL Injection is when an attacker enters a malicious or malformed query to either retrieve or tamper data from a database. And in some cases, log into accounts.
2.)  Command Injection  -->  Command Injection is when web applications take input or user-controlled data and run them as system commands. An attacker may tamper with this data to execute their own system commands. This can be seen in applications that perform misconfigured ping tests. 
3.)  Email Injection  -->  Email injection is a security vulnerability that allows malicious users to send email messages without prior authorization by the email server. These occur when the attacker adds extra data to fields, which are not interpreted by the server correctly. 

in burp intercept we will change the username from (a) to (' or 1=1--) and forward it to the server.

Why does this work?
-->  The character ' will close the brackets in the SQL query
-->  'OR' in a SQL statement will return true if either side of it is true. As 1=1 is always true, the whole statement is true. Thus it will tell the server that the email is valid, and log us into user id 0, which happens to be the administrator account.
-->  The -- character is used in SQL to comment out data, any restrictions on the login will no longer work as they are interpreted as a comment. This is like the # and // comment in python and javascript respectively.

Question #2: Log into the Bender account!
we will put: bender@juice-sh.op'-- as the email. 
But why don't we put the 1=1?
-->   Well, as the email address is valid (which will return true), we do not need to force it to be true. Thus we are able to use '-- to bypass the login system. Note the 1=1 can be used when the email or username is not known or invalid.

  -->  Who broke my lock?!
In this task, we will look at exploiting authentication through different flaws. 

Question #1: Bruteforce the Administrator account's password!

We have used SQL Injection to log into the Administrator account but we still don't know the password. Let's try a brute-force attack! We will once again capture a login request, but instead of sending it through the proxy, we will send it to Intruder.
Go to Positions and then select the Clear ยง button. In the password field place two ยง inside the quotes. To clarify, the ยง ยง is not two sperate inputs but rather Burp's implementation of quotations

Question #2: Reset Jim's password!
we found jim email from his reviews --> we get star tek leak from his review --> searching jim star tek we found about his real name and family info --> we change the password

  -->  AH! Don't look!
A web application should store and transmit sensitive data safely and securely. But in some cases, the developer may not correctly protect their sensitive data, making it vulnerable.

Most of the time, data protection is not applied consistently across the web application making certain pages accessible to the public. Other times information is leaked to the public without the knowledge of the developer, making the web application vulnerable to an attack. 

More information: Sensitive Data Exposure -->  (https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A3-Sensitive_Data_Exposure)

Question #1: Access the Confidential Document!
at about us page we found out about the ftp is open we download file from there and get the flag

Question #2: Log into MC SafeSearch's account!
watch the youtube video --> you will get to know about his password related stuff --> login into him got the flag

Question #3: Download the Backup file!
We will now go back to the  http://10.10.166.214/ftp/ folder and try to download package.json.bak. But it seems we are met with a 403 which says that only .md and .pdf files can be downloaded. 
To get around this, we will use a character bypass called "Poison Null Byte". A Poison Null Byte looks like this: %00. 
Note: as we can download it using the url, we will need to encode this into a url encoded format.
The Poison Null Byte will now look like this: %2500. Adding this and then a .md to the end will bypass the 403 error!

10.10.166.214/ftp/package.json.bak%2500.md --> url to download any file in ftp

  -->  Who's flying this thing?
Modern-day systems will allow for multiple users to have access to different pages.
You might use these when you are building a website with programs such as Weebly or Wix.  

When Broken Access Control exploits or bugs are found, it will be categorised into one of two types:

*  Horizontal Privilege Escalation  -->  Occurs when a user can perform an action or access data of another user with the same level of permissions.
*  Vertical Privilege Escalation  -->  Occurs when a user can perform an action or access data of another user with a higher level of permissions.

More information: Broken Access Control -->  (https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control)

Question #1: Access the administration page!

1.)  We are then going to refresh the page and look for a javascript file for main-es2015.js
2.)  We will then go to that page at: http://10.10.166.214/main-es2015.js
3.)  To get this into a format we can read, click the { } button at the bottom  
4.)  Now search for the term "admin" 
5.)  You will come across a couple of different words containing "admin" but the one we are looking for is "path: administration"
go to that path as an admin --> get the flag

Question #2: View another user's shopping basket!
Login to the Admin account and click on 'Your Basket'. Make sure Burp is running so you can capture the request!
change the http get request by 2

question 3 remove the 5 star review --> just delete it from /administration 

  -->  Where did that come from?
XSS or Cross-site scripting is a vulnerability that allows attackers to run javascript in web applications. These are one of the most found bugs in web applications. Their complexity ranges from easy to extremely hard, as each web application parses the queries in a different way. 

There are three major types of XSS attacks:
1.)  DOM (Special)  -->  DOM XSS (Document Object Model-based Cross-site Scripting) uses the HTML environment to execute malicious javascript. This type of attack commonly uses the <script></script> HTML tag.
2.)  Persistent (Server-side)  -->  Persistent XSS is javascript that is run when the server loads the page containing it. These can occur when the server does not sanitise the user data when it is uploaded to a page. These are commonly found on blog posts. 
3.)  Reflected (Client-side)  -->  Reflected XSS is javascript that is run on the client-side end of the web application. These are most commonly found when the server doesn't sanitise search data. 

Question #1: Perform a DOM XSS!

We will be using the iframe element with a javascript alert tag: 
"""""""""""""""""""""  <iframe src="javascript:alert(`xss`)"> """"""""""""""""""""""""""""""""""""
Inputting this into the search bar will trigger the alert.
Note that we are using iframe which is a common HTML element found in many web applications, there are others which also produce the same result.

This type of XSS is also called """""""""""""""""""""""  XFS (Cross-Frame Scripting)  """""""""""""""""""""""""""""""""""""""", is one of the most common forms of detecting XSS within web applications.
Websites that allow the user to modify the iframe or other DOM elements will most likely be vulnerable to XSS.   
Why does this work?
It is common practice that the search bar will send a request to the server in which it will then send back the related information, but this is where the flaw lies. Without correct input sanitation, we are able to perform an XSS attack against the search bar. 

Question #2: Perform a persistent XSS!

First, login to the admin account.
We are going to navigate to the "Last Login IP" page for this attack.

It should say the last IP Address is 0.0.0.0 or 10.x.x.x 
As it logs the 'last' login IP we will now logout so that it logs the 'new' IP.

Make sure that Burp intercept is on, so it will catch the logout request.
We will then head over to the Headers tab where we will add a new header:
True-Client-IP(header name)  -->  <iframe src="javascript:alert(`xss`)">  (header value)

Then forward the request to the server!
When signing back into the admin account and navigating to the Last Login IP page again, we will see the XSS alert!
Why do we have to send this Header?
""""""""""""""""""  The True-Client-IP  header is similar to the X-Forwarded-For header, both tell the server or proxy what the IP of the client is. Due to there being no sanitation in the header we are able to perform an XSS attack.  """"""""""""""""""""""""" (he did some research about the headers he can use for thsi)  """"""""""""""""""""""" 

Question #3: Perform a reflected XSS!
First, we are going to need to be on the right page to perform the reflected XSS!
Login into the admin account and navigate to the 'Order History' page. 
From there you will see a "Truck" icon, clicking on that will bring you to the track result page. You will also see that there is an id paired with the order.  
We will use the iframe XSS, <iframe src="javascript:alert(`xss`)">, in the place of the 5267-f73dcd000abcc353
After submitting the URL, refresh the page and you will then get an alert saying XSS!

Why does this work?
The server will have a lookup table or database (depending on the type of server) for each tracking ID. As the 'id' parameter is not sanitised before it is sent to the server, we are able to perform an XSS attack.  

Access the /#/score-board/ page --> access this page to do/find more about challanges you can try

