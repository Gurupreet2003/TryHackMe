"""""  TASK 5,6,7 of fundamentals of linux 3 are important  """"

Where is Linux Used?
Linux is considerably much more lightweight and you'd be surprised to know that there's a good chance you've used Linux in some form or another every day! Linux powers things such as:
--> Websites that you visit
--> Car entertainment/control panels
--> Point of Sale (PoS) systems such as checkout tills and registers in shops
--> Critical infrastructures such as traffic light controllers or industrial sensors

Flavours of Linux
The name "Linux" is actually an umbrella term for multiple OS's that are based on UNIX (another operating system). 
Ubuntu & Debian are some of the more commonplace distributions of Linux because it is so extensible. I.e. you can run Ubuntu as a server (such as websites & web applications) or as a fully-fledged desktop.

What year was the first release of a Linux operating system?
1991 (ANS)

there is no GUI (Graphical User Interface) or what is also known as a desktop environment that we can use to interact with the machine (unless it has been installed). A large part of interacting with these systems is using the "Terminal".

echo	  -->  Output any text that we provide
whoami  -->  Find out what user we're currently logged in as!

Interacting With the Filesystem
ls	-->  listing (Listing Files in Our Current Directory (ls))     """"  NOTE--> You can list the contents of a directory without having to navigate to it by using ls and the name of the directory. I.e. ls Pictures  """"
cd	-->  change directory  (Changing Our Current Directory (cd))
cat	-->  concatenate  (protip if you want to print the data of a file inside a folder in current directory usage ./folder4/file_name)
pwd	-->  print working directory

find 
If we remember the filename, we can simply use find -name passwords.txt where the command will look through every folder in our current directory for that specific file
But let's say that we don't know the name of the file, or want to search for every file that has an extension such as ".txt".We can simply use what's known as a wildcard (*) to search for anything that has .txt at the end. In our case, we want to find every .txt file that's in our current directory. We will construct a command such as find -name *.txt

Symbol/Operator	                                                          Description
&	                  -->                       This operator allows you to run commands in the background of your terminal.
&&	                -->                       This operator allows you to combine multiple commands together in one line of your terminal.(command1 && command2. However, it's worth noting that command2 will only run if command1 was successful.)
>	                  -->                       This operator is a redirector - meaning that we can take the output from a command (such as using cat to output a file) and direct it elsewhere.
>>	                -->                       This operator does the same function of the > operator but appends the output rather than replacing (meaning nothing is overwritten).

Secure Shell or SSH for short and is the common means of connecting to and interacting with the command line of a remote Linux machine.
What is SSH & how Does it Work?
Secure Shell or SSH simply is a protocol between devices in an encrypted form. Using cryptography, any input we send in a human-readable format is encrypted for travelling over a network -- where it is then unencrypted once it reaches the remote machine

A majority of commands allow for arguments to be provided. These arguments are identified by a hyphen and a certain keyword known as flags or switches.

The Man(ual) Page
The manual pages are a great source of information for both system commands and applications available on both a Linux machine, which is accessible on the machine itself and online

Command	              Full Name	                        Purpose
touch	                 touch	                        Create file
mkdir	              make directory	                  Create a folder
cp	                   copy	                          Copy a file or folder
mv	                   move	                          Move a file or folder
rm	                  remove	                        Remove a file or folder
file	                 file	                          Determine the type of a file

Briefly: The Differences Between Users & Groups

The great thing about Linux is that permissions can be so granular, that whilst a user technically owns a file, if the permissions have been set, then a group of users can also have either the same or a different set of permissions to the exact same file without affecting the file owner itself.

Let's put this into a real-world context; the system user that runs a web server must have permissions to read and write files for an effective web application. However, companies such as web hosting companies will have to want to allow their customers to upload their own files for their website without being the webserver system user -- compromising the security of every other customer. 

For example, when using su to switch to "user2", our new session drops us into our previous user's home directory. 
Where now, after using -l, our new session has dropped us into the home directory of "user" automatically. 

common directories

/etc
This root directory is one of the most important root directories on your system. The etc folder (short for etcetera) is a commonplace location to store system files that are used by your operating system.
""""  NOTE:-  For example, the sudoers file highlighted in the screenshot below contains a list of the users & groups that have permission to run sudo or a set of commands as the root user. """""
 system stores the passwords for each user in encrypted formatting called sha512 in shadow or passwd file.

/var
The "/var" directory, with "var" being short for variable data,  is one of the main root folders found on a Linux install. This folder stores data that is frequently accessed or written by services or applications running on the system. For example, log files from running services and applications are written here (/var/log), or other data that is not necessarily associated with a specific user (i.e., databases and the like).

/root
Unlike the /home directory, the /root folder is actually the home for the "root" system user. There isn't anything more to this folder other than just understanding that this is the home directory for the "root" user. But, it is worth a mention as the logical presumption is that this user would have their data in a directory such as "/home/root" by default. 

/tmp
This is a unique root directory found on a Linux install. Short for "temporary", the /tmp directory is volatile and is used to store data that is only needed to be accessed once or twice. Similar to the memory on your computer, once the computer is restarted, the contents of this folder are cleared out.
"""" What's useful for us in pentesting is that any user can write to this folder by default. Meaning once we have access to a machine, it serves as a good place to store things like our enumeration scripts. """"

pipe operators (> and >> or |)

Introducing terminal text editors

Nano
It is easy to get started with Nano! To create or edit a file using nano, we simply use nano filename
Nano has a few features that are easy to remember & covers the most general things you would want out of a text editor, including:
--> Searching for text
--> Copying and Pasting
--> Jumping to a line number
--> Finding out what line number you are on

VIM
VIM is a much more advanced text editor. Whilst you're not expected to know all advanced features, it's helpful to mention it for powering up your Linux skills.
Some of VIM's benefits, albeit taking a much longer time to become familiar with, includes:
--> Customisable - you can modify the keyboard shortcuts to be of your choosing
--> Syntax Highlighting - this is useful if you are writing or maintaining code, making it a popular choice for software developers
--> VIM works on all terminals where nano may not be installed
--> There are a lot of resources such as cheatsheets, tutorials, and the sorts available to you use.
"""" NOTE :- https://vim.rtorr.com/  vim cheatsheet site

Downloading Files (Wget)
A pretty fundamental feature of computing is the ability to transfer files. 
This command allows us to download files from the web via HTTP -- as if you were accessing the file in your browser. We simply need to provide the address of the resource that we wish to download.

Transferring Files From Your Host - SCP (SSH)
Secure copy, or SCP, is just that -- a means of securely copying files. Unlike the regular cp command, this command allows you to transfer files between two computers using the SSH protocol to provide both authentication and encryption.
Working on a model of SOURCE and DESTINATION, SCP allows you to:
-->  Copy files & directories from your current system to a remote system
-->  Copy files & directories from a remote system to your current system
eg of scp usage 1- local to remote and 2- remote to local stroing the file
1.)  scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt
2.)  scp ubuntu@192.168.1.30:/home/ubuntu/documents.txt notes.txt 

Serving Files From Your Host - WEB
Ubuntu machines come pre-packaged with python3. Python helpfully provides a lightweight and easy-to-use module called "HTTPServer". This module turns your computer into a quick and easy web server that you can use to serve your own files, where they can then be downloaded by another computing using commands such as curl and wget. 
Python3's "HTTPServer" will serve the files in the directory where you run the command, but this can be changed by providing options that can be found within the manual pages. Simply, all we need to do is run python3 -m  http.server in the terminal to start the module!
One flaw with this module is that you have no way of indexing, so you must know the exact name and location of the file that you wish to use. This is why I prefer to use Updog. (https://github.com/sc0tfree/updog)
A more advanced yet lightweight webserver. 

Processes
Processes are the programs that are running on your machine. They are managed by the kernel, where each process will have an ID associated with it, also known as its PID. The PID increments for the order In which the process starts. I.e. the 60th process will have a PID of 60.

Viewing Processes
We can use the friendly ps command to provide a list of the running processes as our user's session and some additional information such as its status code, the session that is running it, how much usage time of the CPU it is using, and the name of the actual program or command that is being executed
To see the processes run by other users and those that don't run from a session (i.e. system processes), we need to provide aux to the ps command like so: ps aux

""""Another very useful command is the top command; top gives you real-time statistics about the processes running on your system instead of a one-time view.These statistics will refresh every 10 seconds, but will also refresh when you use the arrow keys to browse the various rows. Another great command to gain insight into your system is via the top command """"

Managing Processes
You can send signals that terminate processes; there are a variety of types of signals that correlate to exactly how "cleanly" the process is dealt with by the kernel. To kill a command, we can use the appropriately named kill command and the associated PID that we wish to kill. i.e., to kill PID 1337, we'd use kill 1337.
Below are some of the signals that we can send to a process when it is killed:
-->  SIGTERM - Kill the process, but allow it to do some cleanup tasks beforehand
-->  SIGKILL - Kill the process - doesn't do any cleanup after the fact
-->  SIGSTOP - Stop/suspend a process

How do Processes Start?
The Operating System (OS) uses namespaces to ultimately split up the resources available on the computer to (such as CPU, RAM and priority) processes. Think of it as splitting your computer up into slices -- similar to a cake. Processes within that slice will have access to a certain amount of computing power, however, it will be a small portion of what is actually available to every process overall.
Namespaces are great for security as it is a way of isolating processes from another -- only those that are in the same namespace will be able to see each other.

The process with an ID of 0 is a process that is started when the system boots. This process is the system's init on Ubuntu, such as systemd, which is used to provide a way of managing a user's processes and sits in between the operating system and the user.
once a system boots and it initialises, systemd is one of the first processes that are started. Any program or piece of software that we want to start will start as what's known as a child process of systemd. This means that it is controlled by systemd, but will run as its own process (although sharing the resources from systemd) to make it easier for us to identify and the likes.

Getting Processes/Services to Start on Boot
Some applications can be started on the boot of the system that we own. For example, web servers, database servers or file transfer servers. This software is often critical and is often told to start during the boot-up of the system by administrators.

we're going to be telling the apache web server to be starting apache manually and then telling the system to launch apache2 on boot.
Enter the use of systemctl -- this command allows us to interact with the systemd process/daemon. systemctl is an easy to use command that takes the following formatting: systemctl [option] [service]
apache to start up, we'll use systemctl start apache2

We can do four options with systemctl:
--> Start
--> Stop
--> Enable
--> Disable

An Introduction to Backgrounding and Foregrounding in Linux
Processes can run in two states: In the background and in the foreground. For example, commands that you run in your terminal such as "echo" or things of that sort will run in the foreground of your terminal as it is the only command provided that hasn't been told to run in the background.

"Echo" is a great example as the output of echo will return to you in the foreground, but wouldn't in the background

We can do the exact same when executing things like scripts -- rather than relying on the & operator, we can use Ctrl + Z on our keyboard to background a process. It is also an effective way of "pausing" the execution of a script or command
By using Ctrl + Z (as indicated by T^Z). Now our terminal is no longer filled up with messages -- until we foreground it

Foregrounding a process
Now that we have a process running in the background we can back-pedal and bring this process back to the foreground to interact with.
With our process backgrounded using either Ctrl + Z or the & operator, we can use fg to bring this back to focus
the fg command is being used to bring the background process back into use on the terminal, where the output of the script is now returned to us.

Users may want to schedule a certain action or task to take place after the system has booted. Take, for example, running commands, backing up files,etc
We're going to be talking about the cron process, but more specifically, how we can interact with it via the use of crontabs . Crontab is one of the processes that is started during boot, which is responsible for facilitating and managing cron jobs.

A crontab is simply a special file with formatting that is recognised by the cron process to execute each line step-by-step. Crontabs require 6 specific values:

Value	                                                            Description
MIN	                    -->                               What minute to execute at
HOUR	                  -->                               What hour to execute at
DOM	                    -->                             What day of the month to execute at
MON	                    -->                             What month of the year to execute at
DOW	                    -->                             What day of the week to execute at
CMD	                    -->                             The actual command that will be executed.

"""""""  Let's use the example of backing up files. You may wish to backup "cmnatic"'s  "Documents" every 12 hours. We would use the following formatting: """"""
"""""""  0 */12 * * * cp -R /home/cmnatic/Documents /var/backups/  """"""
 
An interesting feature of crontabs is that these also support the wildcard or asterisk (*). If we do not wish to provide a value for that specific field, i.e. we don't care what month, day, or year it is executed -- only that it is executed every 12 hours, we simply just place an asterisk.

there are some great resources such as the online "Crontab Generator" that allows you to use a friendly application to generate your formatting for you! As well as the site "Cron Guru"!
"""" NOTE:-  https://crontab-generator.org/  """"
"""" NOTE:-  https://crontab.guru/  """"

"""" NOTE:-  Crontabs can be edited by using """crontab -e"""(this command help us to edit crontab of that user at any directory of user at in), where you can select an editor (such as Nano) to edit your crontab.  """"

Introducing Packages & Software Repos

When developers wish to submit software to the community, they will submit it to an  "apt" repository. If approved, their programs and tools will be released into the wild. Two of the most redeeming features of Linux shine to light here: User accessibility and the merit of open source tools.

When using the ls command on a Ubuntu 20.04 Linux machine, these files serve as the gateway/registry. (ls at /etc/apt)
Whilst Operating System vendors will maintain their own repositories, you can also add community repositories to your list! This allows you to extend the capabilities of your OS. Additional repositories can be added by using the add-apt-repositorycommand or by listing another provider! For example, some vendors will have a repository that is closer to their geographical location.

Managing Your Repositories (Adding and Removing)

Normally we use the apt command to install software onto our Ubuntu system. The apt command is a part of the package management software also named apt. Apt contains a whole suite of tools that allows us to manage the packages and sources of our software, and to install or remove software at the same time.
Whilst you can install software through the use of package installers such as dpkg, the benefits of apt means that whenever we update our system -- the repository that contains the pieces of software that we add also gets checked for updates. 
we're going to add the text editor Sublime Text to our Ubuntu machine as a repository as it is not a part of the default Ubuntu repositories. When adding software, the integrity of what we download is guaranteed by the use of what is called GPG (Gnu Privacy Guard) keys. These keys are essentially a safety check from the developers saying, "here's our software". If the keys do not match up to what your system trusts and what the developers used, then the software will not be downloaded.

to start, we need to add the GPG key for the developers of Sublime Text 3. 
1.)  Let's download the GPG key and use apt-key to trust it:  wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
2.) Now that we have added this key to our trusted list, we can now add Sublime Text 3's repository to our apt sources list. A good practice is to have a separate file for every different community/3rd party repository that we add.
2.1.) Let's create a file named sublime-text.list in /etc/apt/sources.list.d and enter the repository information like
2.2)  And now use Nano or a text editor of your choice to add & save the Sublime Text 3 repository into this newly created file: (content of file - deb httpe://download.sublimetext.com/ apt/stable)
2.3)  After we have added this entry, we need to update apt to recognise this new entry -- this is done using the apt update command
2.4)  Once successfully updated, we can now proceed to install the software that we have trusted and added to apt using apt install sublime-text

Removing packages is as easy as reversing. This process is done by using the add-apt-repository --remove ppa:PPA_Name/ppa command or by manually deleting the file that we previously added to. Once removed, we can just use apt remove [software-name-here] i.e. apt remove sublime-text

Located in the /var/log directory, these files and folders contain logging information for applications and services running on your system. The Operating System  (OS) has become pretty good at automatically managing these logs in a process that is known as "rotating".

I have highlighted some logs from three services running on a Ubuntu machine:
-->  An Apache2 web server
-->  Logs for the fail2ban service, which is used to monitor attempted brute forces, for example
-->  The UFW service which is used as a firewall

These services and logs are a great way in monitoring the health of your system and protecting it. Not only that, but the logs for services such as a web server contain information about every single request - allowing developers or administrators to diagnose performance issues or investigate an intruder's activity. For example, the two types of log files below that are of interest:
-->  access log
-->  error log

There are, of course, logs that store information about how the OS is running itself and actions that are performed by users, such as authentication attempts.


Bash Scripting - https://tryhackme.com/room/bashscripting
Regular Expressions - https://tryhackme.com/room/catregex
